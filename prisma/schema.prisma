// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// emuns

enum Role {
  USER
  EDITOR
  ADMIN
}

enum TokenType {
  REFRESH_TOKEN
  VERIFICATION_TOKEN
  FORGET_TOKEN
}

enum ProjectStatus {
  TODO
  IN_PROGRESS
  DONE
}

// Models

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  token     String    @unique @default(uuid())
  owner     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  expiresAt DateTime
  createdAt DateTime  @default(now())

  @@map("tokens")
}

model User {
  id            String   @id @default(uuid())
  email         String   @unique @db.VarChar(255)
  emailVerified Boolean  @default(false)
  name          String   @db.VarChar(200)
  userName      String   @unique @db.VarChar(200)
  password      String   @db.VarChar(250)
  picture       String?  @db.VarChar(300)
  providerId    String?  @db.VarChar(200)
  role          Role     @default(USER)
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  tokens              Token[]
  Projects            Project[]
  ProjectParticipants ProjectParticipant[]
  @@map("users")
}

model Project {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(200)
  description String?       @default("Sem descrição") @db.VarChar(1000)
  status      ProjectStatus @default(TODO)
  tasks       Task[]

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id])

  startDate DateTime? @db.DateTime
  endDate   DateTime? @db.DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants ProjectParticipant[]
  labels       Label[]

  @@map("projects")
}

model ProjectParticipant {
  id        Int      @id @default(autoincrement())
  projectId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("project_participants")
}

model Task {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(200)
  description String?       @default("Sem descrição") @db.VarChar(1000)
  status      ProjectStatus @default(TODO)

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  startDate DateTime? @db.DateTime
  endDate   DateTime? @db.DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  labels Label[]

  todos TaskTodo[]
  @@map("tasks")
}

model TaskTodo {
  id   String  @id @default(uuid())
  text String  @db.VarChar(200)
  done Boolean @default(false)

  taskId String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_todos")
}

model Label {
  id    String @id @default(uuid())
  name  String @unique @db.VarChar(25)
  color String @default("#ff811c") @db.VarChar(7)

  projects Project[]
  tasks    Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("labels")
}
