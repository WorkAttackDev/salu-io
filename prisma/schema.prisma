// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

// emuns

enum Role {
  USER
  EDITOR
  ADMIN
}

enum TokenType {
  REFRESH_TOKEN
  VERIFICATION_TOKEN
  FORGET_TOKEN
}

enum BroaReactionType {
  HAHA
  LOVE
}

// Models
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique @db.VarChar(255)
  emailVerified Boolean  @default(false)
  name          String   @db.VarChar(200)
  userName      String   @unique @db.VarChar(200)
  password      String   @db.VarChar(250)
  picture       String?  @db.VarChar(300)
  providerId    String?  @db.VarChar(200)
  role          Role     @default(USER)
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  tokens       Token[]
  Broa         Broa[]
  BroaReaction BroaReaction[]
  @@map("users")
}

model BroaReaction {
  id Int @id @default(autoincrement())

  user         User             @relation(fields: [userId], references: [id])
  userId       Int
  broa         Broa             @relation(fields: [broaId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  broaId       Int
  reactionType BroaReactionType
  updatedAt    DateTime         @updatedAt
  createdAt    DateTime         @default(now())

  @@unique([userId, broaId, reactionType])
  @@map("broa_reactions")
}

model Broa {
  id           Int      @id @default(autoincrement())
  wrongVersion String   @db.VarChar(255)
  rightVersion String   @db.VarChar(255)
  author       String   @default("Desconhecido") @db.VarChar(100)
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int?
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())

  reactions BroaReaction[]
  @@map("broas")
}

model Token {
  id        Int       @id @default(autoincrement())
  type      TokenType
  token     String    @unique @default(uuid())
  owner     User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime  @default(now())

  @@map("tokens")
}
